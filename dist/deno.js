"use strict";(()=>{function u(){let n,e="pending",t=new Promise((r,s)=>{n={async resolve(o){await o,e="fulfilled",r(o)},reject(o){e="rejected",s(o)}}});return Object.defineProperty(t,"state",{get:()=>e}),Object.assign(t,n)}function p(n,e={}){let{signal:t,persistent:r}=e;return t?.aborted?Promise.reject(new DOMException("Delay was aborted.","AbortError")):new Promise((s,o)=>{let i=()=>{clearTimeout(d),o(new DOMException("Delay was aborted.","AbortError"))},d=setTimeout(()=>{t?.removeEventListener("abort",i),s()},n);if(t?.addEventListener("abort",i,{once:!0}),r===!1)try{Deno.unrefTimer(d)}catch(f){if(!(f instanceof ReferenceError))throw f;console.error("`persistent` option is only available in Deno")}})}var w=class{#n=0;#t=[];#s=[];#e=u();add(e){++this.#n,this.#r(e[Symbol.asyncIterator]())}async#r(e){try{let{value:t,done:r}=await e.next();r?--this.#n:this.#t.push({iterator:e,value:t})}catch(t){this.#s.push(t)}this.#e.resolve()}async*iterate(){for(;this.#n>0;){await this.#e;for(let e=0;e<this.#t.length;e++){let{iterator:t,value:r}=this.#t[e];yield r,this.#r(t)}if(this.#s.length){for(let e of this.#s)throw e;this.#s.length=0}this.#t.length=0,this.#e=u()}}[Symbol.asyncIterator](){return this.iterate()}},c="Server closed",v=5,g=1e3,l=class{#n;#t;#s;#e=!1;#r=new Set;#i=new AbortController;#o=new Set;#a;constructor(e){this.#n=e.port,this.#t=e.hostname,this.#s=e.handler,this.#a=e.onError??function(t){return console.error(t),new Response("Internal Server Error",{status:500})}}async serve(e){if(this.#e)throw new Deno.errors.Http(c);this.#f(e);try{return await this.#d(e)}finally{this.#u(e);try{e.close()}catch{}}}async listenAndServe(){if(this.#e)throw new Deno.errors.Http(c);let e=Deno.listen({port:this.#n??80,hostname:this.#t??"0.0.0.0",transport:"tcp"});return await this.serve(e)}async listenAndServeTls(e,t){if(this.#e)throw new Deno.errors.Http(c);let r=Deno.listenTls({port:this.#n??443,hostname:this.#t??"0.0.0.0",certFile:e,keyFile:t,transport:"tcp"});return await this.serve(r)}close(){if(this.#e)throw new Deno.errors.Http(c);this.#e=!0;for(let e of this.#r)try{e.close()}catch{}this.#r.clear(),this.#i.abort();for(let e of this.#o)this.#c(e);this.#o.clear()}get closed(){return this.#e}get addrs(){return Array.from(this.#r).map(e=>e.addr)}async#l(e,t){let r;try{if(r=await this.#s(e.request,t),r.bodyUsed&&r.body!==null)throw new TypeError("Response body already consumed.")}catch(s){r=await this.#a(s)}try{await e.respondWith(r)}catch{}}async#h(e,t){for(;!this.#e;){let r;try{r=await e.nextRequest()}catch{break}if(r===null)break;this.#l(r,t)}this.#c(e)}async#d(e){let t;for(;!this.#e;){let r;try{r=await e.accept()}catch(i){if(i instanceof Deno.errors.BadResource||i instanceof Deno.errors.InvalidData||i instanceof Deno.errors.UnexpectedEof||i instanceof Deno.errors.ConnectionReset||i instanceof Deno.errors.NotConnected){t?t*=2:t=v,t>=1e3&&(t=g);try{await p(t,{signal:this.#i.signal})}catch(a){if(!(a instanceof DOMException&&a.name==="AbortError"))throw a}continue}throw i}t=void 0;let s;try{s=Deno.serveHttp(r)}catch{continue}this.#w(s);let o={localAddr:r.localAddr,remoteAddr:r.remoteAddr};this.#h(s,o)}}#c(e){this.#y(e);try{e.close()}catch{}}#f(e){this.#r.add(e)}#u(e){this.#r.delete(e)}#w(e){this.#o.add(e)}#y(e){this.#o.delete(e)}};function D(n){return n==="0.0.0.0"?"localhost":n}async function y(n,e={}){let t=e.port??8e3,r=e.hostname??"0.0.0.0",s=new l({port:t,hostname:r,handler:n,onError:e.onError});e?.signal?.addEventListener("abort",()=>s.close(),{once:!0});let o=s.listenAndServe();return t=s.addrs[0].port,"onListen"in e?e.onListen?.({port:t,hostname:r}):console.log(`Listening on http://${D(r)}:${t}/`),await o}var h={args:Deno.args,os:Deno.build.os,variant:"Deno",version:Deno.version.deno,persist:!0,exit:(n=0)=>{Deno.exit(n)},getEnv:(n,e)=>Deno.env.get(n)||e,memUsed:()=>Deno.memoryUsage(),randomInt:n=>Math.floor(Math.random()*n),readFile:async function(n,e){return await Deno.readFile(n,e)},serve:(n,e={})=>(e?.onListen||(e.onListen=function({port:t,hostname:r}){console.error(`Serving at http://${r}:${t}`)}),e?.hostname||(e.hostname="127.0.0.1"),e?.port||(e.port=8e3),y(n,e)),setEnv:(n,e)=>Deno.env.set(n,e),sleep:function(n,e=0){return new Promise((t,r)=>{AbortSignal.timeout(n+Math.floor(e*Math.random())).addEventListener("abort",()=>{t()})})},upgradeWebSocket(n,e){return Deno.upgradeWebSocket(n,e)},writeFile:async function(n,e,t){await Deno.writeFile(n,e,t)}};var m=async function(){WingBlade.serve(()=>new Response("Test me!"))};self.WingBlade=h;m(h.args);})();
